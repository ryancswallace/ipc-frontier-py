name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  test:
    name: Lint + Types + Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install pipx + Poetry
        run: |
          python -m pip install --upgrade pip pipx
          pipx install poetry

      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-${{ runner.arch }}-py${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-py${{ steps.setup-python.outputs.python-version }}-poetry-

      - name: Configure Poetry to create in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Install project (all groups)
        run: poetry install --all-groups --no-interaction

      - name: Run linting tests (Ruff)
        run: make fmttest

      - name: Run type tests (Pyright)
        run: make typetest

      - name: Run unit tests (pytest)
        env:
          OMP_NUM_THREADS: "1"
          MKL_NUM_THREADS: "1"
          OPENBLAS_NUM_THREADS: "1"
        run: make unittest

      - name: Upload HTML coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.os }}
          path: htmlcov
          if-no-files-found: ignore
