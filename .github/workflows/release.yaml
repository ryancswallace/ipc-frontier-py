name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  id-token: write  # for OIDC "Trusted Publishing" to PyPI

env:
  OMP_NUM_THREADS: "1"
  MKL_NUM_THREADS: "1"
  OPENBLAS_NUM_THREADS: "1"

jobs:
  build-test-publish:
    name: Build • Test • Publish (v-tag)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install pipx + Poetry
        run: |
          python -m pip install --upgrade pip pipx
          pipx install poetry

      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-${{ runner.arch }}-py${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-py${{ steps.setup-python.outputs.python-version }}-poetry-

      - name: Configure Poetry to create in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Install project (all groups)
        run: poetry install --all-groups --no-interaction

      - name: Run linting tests (Ruff)
        run: make fmttest

      - name: Run type tests (Pyright)
        run: make typetest

      - name: Run unit tests (pytest)
        env:
          OMP_NUM_THREADS: "1"
          MKL_NUM_THREADS: "1"
          OPENBLAS_NUM_THREADS: "1"
        run: make unittest

      - name: Extract version from pyproject.toml
        id: version
        shell: bash
        run: |
          ver="$(
            python - <<-'PY'
						import tomllib, pathlib
						data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
						print(data["project"]["version"])
PY
          )"
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Export VERSION variable
        shell: bash
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> "$GITHUB_ENV"

      # Publishing gate: fail if the pushed tag does not match the pyproject.toml project.version value
      - name: Verify tag matches project.version
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          EXPECTED="v${VERSION}"
          echo "Version tag name: ${TAG_NAME}"
          echo "Expected version: ${EXPECTED}"
          if [ "${TAG_NAME}" != "${EXPECTED}" ]; then
            echo "::error::Tag ${TAG_NAME} does not match project.version ${VERSION} in pyproject.toml (expected ${EXPECTED})."
            exit 1
          fi

      - name: Build sdist + wheel
        run: poetry build

      - name: Upload dist/ as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ env.VERSION }}
          path: dist/*
          if-no-files-found: error

      - name: Create/Update GitHub Release for tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true

      - name: Configure Poetry for GitHub Packages
        env:
          GH_OWNER: ${{ github.repository_owner }}
        run: |
          poetry config repositories.github "https://pypi.pkg.github.com/ryancswallace"
          poetry config http-basic.github "${{ github.actor }}" "${{ secrets.GITHUB_TOKEN }}"

      - name: Publish to GitHub Packages
        run: poetry publish -r github -n
